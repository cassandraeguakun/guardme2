/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 123);
/******/ })
/************************************************************************/
/******/ ({

/***/ 123:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(124);


/***/ }),

/***/ 124:
/***/ (function(module, exports) {

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Events = function () {
    function Events() {
        _classCallCheck(this, Events);

        this.vue = new Vue();
    }

    _createClass(Events, [{
        key: 'fire',
        value: function fire(eventName, params) {
            this.vue.$emit(eventName, params);
        }
    }, {
        key: 'on',
        value: function on(eventName, callback) {
            this.vue.$on(eventName, callback);
        }
    }]);

    return Events;
}();

window.Events = new Events();

Vue.component('approve-modal', {
    template: '\n                <div class="modal" tabindex="-1" role="dialog" :class="{show: show}">\n                  <div class="modal-dialog" role="document">\n                    <div class="modal-content">\n                      <div class="modal-header">\n                        <h5 class="modal-title">\n                            Do you want to inform the user?\n                        </h5>\n                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @click.prevent="hide" style="position: absolute; right: 10px; top: 10px;">\n                          <span aria-hidden="true">&times;</span>\n                        </button>\n                      </div>\n                      <div class="modal-body">\n                        User will get a notification that account has been approved.\n                      </div>\n                      <div class="modal-footer">\n                        <button type="button" class="btn btn-primary" @click.prevent="withNotification">Yes</button>\n                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @click.prevent="withoutNotification">No</button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n    ',

    data: function data() {
        return {
            show: false,
            form: {
                user_id: '',
                with_notification: false
            }
        };
    },


    methods: {
        withNotification: function withNotification() {
            this.form.with_notification = true;

            window.Events.fire('onapprovemodalclose', this.form);

            this.hide();
        },
        withoutNotification: function withoutNotification() {
            this.form.with_notification = false;

            window.Events.fire('onapprovemodalclose', this.form);

            this.hide();
        },
        hide: function hide() {
            this.show = false;
        }
    },

    created: function created() {
        var $this = this;

        window.Events.on('showapprovemodal', function (props) {
            $this.form.user_id = props.user_id;
            $this.show = true;
        });
    }
});

Vue.component('disapprove-modal', {
    template: '\n                <div class="modal" tabindex="-1" role="dialog" :class="{show: show}">\n                  <div class="modal-dialog" role="document">\n                    <div class="modal-content">\n                      <div class="modal-header">\n                        <h5 class="modal-title">\n                            Do you want to inform the user?\n                        </h5>\n                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @click.prevent="hide" style="position: absolute; right: 10px; top: 10px;">\n                          <span aria-hidden="true">&times;</span>\n                        </button>\n                      </div>\n                      <div class="modal-body">\n                        <div class="form-group">\n                            <input type="text" class="form-control" name="title" v-model="form.title" placeholder="Email Subject"/>\n                        </div>\n                        <div class="form-group">\n                            <textarea class="form-control" name="body" v-model="form.body" placeholder="Email Subject"></textarea>\n                        </div>\n                      </div>\n                      <div class="modal-footer">\n                        <button type="button" class="btn btn-primary" @click.prevent="withNotification">Yes</button>\n                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @click.prevent="withoutNotification">No</button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n    ',

    data: function data() {
        return {
            show: false,
            form: {
                user_id: '',
                title: '',
                body: '',
                with_notification: false
            }
        };
    },


    methods: {
        withNotification: function withNotification() {
            this.form.with_notification = true;

            window.Events.fire('ondisapprovemodalclose', this.form);

            this.hide();
        },
        withoutNotification: function withoutNotification() {
            this.form.with_notification = false;

            window.Events.fire('ondisapprovemodalclose', this.form);

            this.hide();
        },
        hide: function hide() {
            this.show = false;
        }
    },

    created: function created() {
        var $this = this;

        window.Events.on('showdisapprovemodal', function (props) {
            $this.form.user_id = props.user_id;
            $this.show = true;
        });
    }
});

new window.App({
    el: '#app',

    data: function data() {
        return {
            selected_filter: null,

            users: [],

            cities: [],

            date_from: '',

            date_to: '',

            category: '',

            country_id: '',

            city_id: ''
        };
    },


    methods: {
        fetchUsers: function fetchUsers() {
            var _this = this;

            window.axios.get(FETCH_USERS_ENDPOINT).then(function (response) {
                if (response != undefined && response.statusText == 'OK') {
                    _this.users = response.data;
                }
            });
        },
        filter: function filter() {
            var _this2 = this;

            var data = {};

            switch (this.selected_filter) {
                case 'new':
                    data = {
                        filter: 'new',
                        date_from: this.date_from,
                        date_to: this.date_to
                    };

                    break;
                case 'verified':
                case 'unverified':
                    data = {
                        filter: this.selected_filter
                    };
                    break;
                case 'city':
                    data = {
                        filter: 'city',
                        country_id: this.country_id,
                        city_id: this.city_id
                    };

                    break;
                case 'category':
                    data = {
                        filter: 'category',
                        category_id: this.category
                    };

                    break;
                default:
                    data = {};
                    break;
            }

            window.axios.post(FETCH_USERS_ENDPOINT, data).then(function (response) {
                if (response != undefined && response.statusText == 'OK') {
                    _this2.users = response.data;
                }
            });
        },
        printStatus: function printStatus(status) {
            switch (status) {
                case 0:
                    return '<a class="label label-rouded label-default">Unverified</a>';
                    break;
                case 1:
                    return '<a class="label label-rouded label-info">Verified</a>';
                    break;
                case 2:
                    return '<a class="label label-rouded label-warning">Suspended</a>';
                    break;
                case 3:
                    return '<a class="label label-rouded label-success">Approved</a>';
                    break;
                case 4:
                    return '<a class="label label-rouded label-danger">Disapproved</a>';
                    break;
            }
        },
        approve: function approve(userId) {
            window.Events.fire('showapprovemodal', { user_id: userId });
        },
        onApproveModalClose: function onApproveModalClose(props) {
            var _this3 = this;

            window.axios.post('/api/account/profile/approve/' + props.user_id, props).then(function (response) {
                if (response != undefined && response.statusText == 'OK') {
                    _this3.updateUserStatus(response.data.user.id, response.data.user.status);
                }
            });
        },
        disapprove: function disapprove(userId) {
            window.Events.fire('showdisapprovemodal', { user_id: userId });
        },
        onDisapproveModalClose: function onDisapproveModalClose(props) {
            var _this4 = this;

            window.axios.post('/api/account/profile/disapprove/' + props.user_id, props).then(function (response) {
                if (response != undefined && response.statusText == 'OK') {
                    _this4.updateUserStatus(response.data.user.id, response.data.user.status);
                }
            });
        },
        suspend: function suspend(userId) {
            var _this5 = this;

            window.axios.get('/api/account/profile/suspend/' + userId).then(function (response) {
                if (response != undefined && response.statusText == 'OK') {
                    _this5.updateUserStatus(response.data.user.id, response.data.user.status);
                }
            });
        },
        updateUserStatus: function updateUserStatus(userId, statusId) {
            if (this.users.length > 0) {
                for (var key in this.users) {
                    var user = this.users[key];

                    if (user.id == userId) {
                        user.status = statusId;

                        this.users[key] = user;

                        break;
                    }
                }
            }
        },
        onCountryChange: function onCountryChange() {
            var _this6 = this;

            window.axios.get('/api/app/counties/' + this.country_id + '/cities').then(function (response) {
                _this6.cities = response.data;
            });
        }
    },

    mounted: function mounted() {
        this.fetchUsers();
    },
    created: function created() {
        var $this = this;

        window.Events.on('onapprovemodalclose', function (props) {
            $this.onApproveModalClose(props);
        });

        window.Events.on('ondisapprovemodalclose', function (props) {
            $this.onDisapproveModalClose(props);
        });
    }
});

/***/ })

/******/ });