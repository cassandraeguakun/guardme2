/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 119);
/******/ })
/************************************************************************/
/******/ ({

/***/ 119:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(120);


/***/ }),

/***/ 120:
/***/ (function(module, exports) {

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Errors = function () {
    function Errors() {
        _classCallCheck(this, Errors);

        this.formErrors = {};
    }

    _createClass(Errors, [{
        key: 'get',
        value: function get(field) {
            if (this.formErrors[field]) {
                return this.formErrors[field][0];
            }
        }
    }, {
        key: 'record',
        value: function record(errors) {
            this.formErrors = errors;
        }
    }]);

    return Errors;
}();

new window.App({
    el: '#app',
    data: function data() {
        return {
            profile: {
                id: '',
                email: '',
                username: '',
                phone: '',
                dob: '',
                address: '',
                password: '',
                profilePicture: '/assets/img/profile-default.png',
                role_name: '',
                security_badge: '',
                proof_of_work: '',
                visa: '',
                category_id: '',
                country_id: '',
                city_id: ''
            },
            password: null,
            alertMessage: '',
            selectedFile: null,
            uploadProgress: '',
            showUploadBtn: '',
            previewDocument: '',
            formErrors: new Errors(),
            countries: [],
            cities: []
        };
    },
    methods: {
        getUserJobProfile: function getUserJobProfile(user) {
            var _this = this;

            window.axios.get('/api/account/profile/get-user-profile').then(function (response) {
                _this.profile.id = response.data.id;
                _this.profile.email = response.data.email;
                _this.profile.username = response.data.username;
                _this.profile.phone = response.data.phone;
                _this.profile.dob = response.data.dob;
                _this.profile.address = response.data.address;
                _this.profile.role_name = response.data.role_name;
                _this.profile.security_badge = response.data.security_badge;
                _this.profile.proof_of_work = response.data.proof_of_work;
                _this.profile.visa = response.data.visa;
                _this.profile.category_id = response.data.category_id;
                _this.profile.country_id = response.data.country_id;
                _this.profile.city_id = response.data.city_id;
                _this.countries = response.data.countries;
                _this.cities = response.data.cities;
                if (response.data.profile_picture) {
                    _this.profile.profilePicture = response.data.profile_picture;
                }
                /*if (response.data.security_badge) {
                    var field = this.getFieldByDocumentType(document_type);
                    var type = this.getFileExtension(response.data.security_badge);
                    if (type != '') {
                        type = type.toLowerCase();
                        if (type == 'jpg' || type == 'png' || type == 'gif' || type == 'jpeg') {
                            this.previewDocument = '<img src="/storage/verification-documents/'+ field +'">'
                        }
                    }
                }*/
            });
        },
        onProfileSubmit: function onProfileSubmit() {
            var _this2 = this;

            this.profile.password = this.password;
            window.axios.post('/api/account/profile/save-profile-data', this.profile).then(function (response) {
                console.log(response.data);
                _this2.password = '';
                if (response.data.errors.length == 0) {
                    _this2.formErrors.record(response.data.errors);
                    _this2.alertMessage = 'Data has been updated Successfully';
                } else {
                    _this2.formErrors.record(response.data.errors);
                }
            });
        },
        onFileSelected: function onFileSelected(event) {
            this.showUploadBtn = true;
            this.selectedFile = event.target.files[0];
            this.uploadProgress = 0;
            this.previewThumbnail(event);
        },
        onUpload: function onUpload() {
            var _this3 = this;

            var fd = new FormData();
            fd.append('profile_picture', this.selectedFile, this.selectedFile.name);
            axios.post('/api/account/profile/upload-profile-picture', fd, {
                onUploadProgress: function onUploadProgress(uploadEvent) {
                    _this3.uploadProgress = Math.round(uploadEvent.loaded / uploadEvent.total * 100) + '%';
                }
            }).then(function (response) {
                _this3.formErrors.record(response.data.errors);
            });
        },
        onVerificationDocumentUpload: function onVerificationDocumentUpload(event, field_name) {
            var _this4 = this;

            var selectedDocument = event.target.files[0];
            var fd = new FormData();
            fd.append(field_name, selectedDocument, selectedDocument.name);
            axios.post('/api/account/profile/upload-verification-document', fd, {
                onUploadProgress: function onUploadProgress(uploadEvent) {
                    _this4.uploadProgress = Math.round(uploadEvent.loaded / uploadEvent.total * 100) + '%';
                }
            }).then(function (response) {
                _this4.formErrors.record(response.data.errors);
                location.reload();
            });
        },

        previewThumbnail: function previewThumbnail(event) {
            var input = event.target;

            if (input.files && input.files[0]) {
                var reader = new FileReader();
                var vm = this;

                reader.onload = function (e) {
                    vm.profile.profilePicture = e.target.result;
                };

                reader.readAsDataURL(input.files[0]);
            }
        },
        getFileExtension: function getFileExtension(file_name) {
            var extension = '';
            var pieces = file_name.split('.');
            if (pieces.length > 0) {
                extension = pieces[pieces.length - 1];
            }
            return extension;
        },
        onDocumentPreview: function onDocumentPreview(document_type) {
            var field = this.getFieldByDocumentType(document_type);
            var typ = this.getFileExtension(field);
            typ = typ.toLowerCase();
            if (typ == 'pdf') {
                window.open('/storage/verification-documents/' + field, '_blank');
            } else {
                if (typ != '') {
                    if (typ == 'jpg' || typ == 'png' || typ == 'gif' || typ == 'jpeg') {
                        this.previewDocument = '<img src="/storage/verification-documents/' + field + '">';
                    }
                }
                $("#document_preview_modal").modal('show');
            }
        },
        getFieldByDocumentType: function getFieldByDocumentType(document_type) {
            var field = '';
            if (document_type == 'security_badge') {
                field = this.profile.security_badge;
            } else if (document_type == 'proof_of_work') {
                field = this.profile.proof_of_work;
            } else if (document_type == 'visa') {
                field = this.profile.visa;
            }
            return field;
        },
        onCountryChange: function onCountryChange() {
            var _this5 = this;

            window.axios.get('/api/app/counties/' + this.profile.country_id + '/cities').then(function (response) {
                _this5.cities = response.data;
            });
        }
    },
    components: {},
    mounted: function mounted() {
        this.getUserJobProfile();
    },
    created: function created() {}
});

/***/ })

/******/ });